pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "flask-app"
        DOCKER_TAG = "latest"
        // Add registry credentials if pushing to Docker Hub/other registry
        // DOCKER_REGISTRY = "your-registry"
    }

    stages {
        stage('Clone Repository') {
            steps {
                checkout scm
                sh 'git --version'
                sh 'ls -la'  // Verify files are checked out
            }
        }

        stage('Verify Docker') {
            steps {
                script {
                    try {
                        sh 'docker --version'
                        sh 'docker info'
                    } catch (Exception e) {
                        error("Docker is not properly configured: ${e}")
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    try {
                        sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
                        sh "docker images | grep ${DOCKER_IMAGE}"
                    } catch (Exception e) {
                        error("Docker build failed: ${e}")
                    }
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    try {
                        // Stop and remove if already running
                        sh "docker stop ${DOCKER_IMAGE}-container || true"
                        sh "docker rm ${DOCKER_IMAGE}-container || true"
                        // Run with proper port mapping
                        sh "docker run -d --name ${DOCKER_IMAGE}-container -p 5000:5000 ${DOCKER_IMAGE}:${DOCKER_TAG}"
                        sh "docker ps | grep ${DOCKER_IMAGE}"
                    } catch (Exception e) {
                        error("Failed to run container: ${e}")
                    }
                }
            }
        }

        stage('Test Application') {
            steps {
                script {
                    // Simple curl test - adjust based on your app
                    sh 'sleep 10'  // Wait for app to start
                    sh 'curl --retry 5 --retry-delay 5 -v http://localhost:5000 || true'
                }
            }
        }

        /*
        // Optional: Push to Docker Registry
        stage('Push to Registry') {
            when {
                branch 'main'
            }
            steps {
                script {
                    withCredentials([usernamePassword(
                        credentialsId: 'docker-hub-credentials',
                        usernameVariable: 'DOCKER_USER',
                        passwordVariable: 'DOCKER_PASS'
                    )]) {
                        sh "docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}"
                        sh "docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${DOCKER_TAG}"
                        sh "docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${DOCKER_TAG}"
                    }
                }
            }
        }
        */
    }

    post {
        always {
            echo 'Pipeline completed - cleaning up'
            script {
                // Clean up containers
                sh "docker stop ${DOCKER_IMAGE}-container || true"
                sh "docker rm ${DOCKER_IMAGE}-container || true"
                // Remove dangling images
                sh 'docker image prune -f || true'
            }
        }
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
