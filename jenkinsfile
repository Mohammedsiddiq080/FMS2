pipeline {
    agent any

    environment {
        DOCKER_HUB_CREDENTIALS = credentials('docker-hub-credentials')
        MONGO_URI = 'mongodb://mongo:27017/FleetManagementSystem'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', 
                url: 'https://github.com/Mohammedsiddiq080/FMS2.git',
                credentialsId: 'github-credentials' // Store GitHub credentials in Jenkins
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dockerImage = docker.build("fms2-app:${env.BUILD_ID}")
                }
            }
        }

        stage('Run Unit Tests') {
            steps {
                sh 'docker-compose -f docker-compose.test.yml up -d --build'
                sh 'sleep 15' // Wait for services to initialize
                sh 'docker exec fms2-app pytest tests/unit/ -v || true' // Continue even if tests fail
            }
            post {
                always {
                    sh 'docker-compose -f docker-compose.test.yml down -v'
                    junit 'test-reports/*.xml' // Process test results
                }
            }
        }

        stage('Integration Test') {
            steps {
                sh 'docker-compose up -d --build'
                sh 'sleep 20' // Wait for app to start
                script {
                    try {
                        // Simple health check
                        def response = sh(script: 'curl -s -o /dev/null -w "%{http_code}" http://localhost:5000', returnStdout: true).trim()
                        if (response != "200") {
                            error("Integration test failed - App not responding properly")
                        }
                    } catch (Exception e) {
                        error("Integration test failed: ${e.getMessage()}")
                    }
                }
            }
            post {
                always {
                    sh 'docker-compose down -v'
                }
            }
        }

        stage('Push to Docker Hub') {
            when {
                branch 'main' // Only push for main branch
            }
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'DOCKER_HUB_CREDENTIALS') {
                        dockerImage.push()
                        // Only push as latest if it's a tagged release
                        if (env.TAG_NAME) {
                            dockerImage.push('latest')
                        }
                    }
                }
            }
        }

        stage('Deploy to Staging') {
            when {
                branch 'main'
            }
            steps {
                sshagent(['staging-server-credentials']) {
                    sh """
                    ssh -o StrictHostKeyChecking=no user@staging-server \
                    "docker pull yourdockerhub/fms2-app:${env.BUILD_ID} && \
                    docker-compose -f /path/to/staging/docker-compose.yml up -d"
                    """
                }
            }
        }
    }

    post {
        always {
            cleanWs()
            script {
                // Archive test results
                junit allowEmptyResults: true, testResults: 'test-reports/*.xml'
            }
        }
        success {
            slackSend(color: 'good', 
                     message: "FMS2 Build #${env.BUILD_NUMBER} succeeded\n${env.BUILD_URL}")
        }
        failure {
            slackSend(color: 'danger', 
                     message: "FMS2 Build #${env.BUILD_NUMBER} failed!\n${env.BUILD_URL}")
            emailext body: "Build failed: ${env.BUILD_URL}",
                     subject: "FMS2 Build #${env.BUILD_NUMBER} failed",
                     to: 'your-email@example.com'
        }
    }
}
