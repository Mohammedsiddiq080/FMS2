pipeline {
    agent any

    environment {
        // Set Python and Redis paths
        PATH = "${env.PATH}:/usr/local/bin"
        REDIS_HOST = 'localhost'
        REDIS_PORT = '6379'
        FLASK_APP = 'app.py'
    }

    stages {
        stage('Checkout SCM') {
            steps {
                checkout scm
            }
        }

        stage('Setup Environment') {
            steps {
                script {
                    // Verify Python is installed
                    def pythonVersion = sh(script: 'python3 --version', returnStatus: true)
                    if (pythonVersion != 0) {
                        error("Python 3 is not installed. Please install Python 3 on the Jenkins agent.")
                    }
                    echo "Using Python: ${sh(script: 'python3 --version', returnStdout: true).trim()}"

                    // Verify Redis is installed and running
                    def redisStatus = sh(script: 'redis-cli ping', returnStatus: true)
                    if (redisStatus != 0) {
                        echo "Starting Redis server..."
                        sh 'sudo service redis-server start || redis-server --daemonize yes'
                        sleep(time: 5, unit: 'SECONDS')
                    }
                    echo "Redis status: ${sh(script: 'redis-cli ping', returnStdout: true).trim()}"
                }
            }
        }

        stage('Create Virtual Environment') {
            steps {
                sh 'python3 -m venv venv'
            }
        }

        stage('Install Dependencies') {
            steps {
                sh '''
                    . venv/bin/activate
                    pip install --upgrade pip
                    [ -f requirements.txt ] && pip install -r requirements.txt
                    pip install redis flask
                '''
            }
        }

        stage('Run Tests') {
            steps {
                sh '''
                    . venv/bin/activate
                    python -m pytest tests/ -v || true
                '''
            }
            post {
                always {
                    junit 'test-reports/*.xml'
                }
            }
        }

        stage('Run Application') {
            steps {
                script {
                    // Start Redis if not running
                    sh 'redis-server --daemonize yes || true'
                    
                    // Run Flask application in background
                    sh '''
                        . venv/bin/activate
                        nohup python -m flask run --host=0.0.0.0 --port=5000 > flask.log 2>&1 &
                        echo $! > flask.pid
                    '''
                    
                    // Verify application is running
                    sleep(time: 10, unit: 'SECONDS')
                    def appStatus = sh(script: 'curl -s -o /dev/null -w "%{http_code}" http://localhost:5000', returnStdout: true).trim()
                    if (appStatus != "200") {
                        error("Application failed to start. Status code: ${appStatus}")
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up processes and environment...'
            sh '''
                # Stop Flask application
                [ -f flask.pid ] && kill -9 $(cat flask.pid) || true
                
                # Stop Redis server
                redis-cli shutdown || true
                
                # Remove temporary files
                rm -rf venv flask.pid flask.log || true
            '''
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
            archiveArtifacts artifacts: 'flask.log', allowEmptyArchive: true
        }
    }
}
