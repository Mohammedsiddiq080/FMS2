pipeline {
    agent {
        node {
            label 'master'
        }
    }

    options {
        skipDefaultCheckout true
    }

    environment {
        DOCKER_HUB_CREDENTIALS = credentials('docker-hub-credentials')
        MONGO_URI = 'mongodb://mongo:27017/FleetManagementSystem'
    }

    stages {
        stage('Initialize') {
            steps {
                cleanWs()
                script {
                    currentBuild.displayName = "Build #${env.BUILD_NUMBER}"
                }
            }
        }

        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: 'main']],
                    extensions: [],
                    userRemoteConfigs: [[
                        url: 'https://github.com/Mohammedsiddiq080/FMS2.git',
                        credentialsId: 'github-credentials'
                    ]]
                ])
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.withRegistry('', env.DOCKER_HUB_CREDENTIALS) {
                        dockerImage = docker.build("fms2-app:${env.BUILD_ID}")
                    }
                }
            }
        }

        stage('Run Unit Tests') {
            steps {
                script {
                    try {
                        sh 'docker-compose -f docker-compose.test.yml up -d --build'
                        sleep(time: 15, unit: 'SECONDS')
                        sh 'docker exec fms2-app pytest tests/unit/ -v || true'
                    } finally {
                        sh 'docker-compose -f docker-compose.test.yml down -v'
                    }
                }
            }
            post {
                always {
                    junit 'test-reports/*.xml'
                }
            }
        }
    }

    post {
        always {
            script {
                echo "Cleaning up workspace..."
                // Cleanup commands if needed
            }
        }
        success {
            script {
                echo 'Build succeeded!'
                // Add success notifications here
            }
        }
        failure {
            script {
                echo 'Build failed!'
                // Add failure notifications here
            }
        }
    }
}
