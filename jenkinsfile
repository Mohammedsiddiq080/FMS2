pipeline {
    agent any

    options {
        skipDefaultCheckout true
    }

    environment {
        DOCKER_HUB_CREDENTIALS = credentials('docker-hub-credentials')
        MONGO_URI = 'mongodb://mongo:27017/FleetManagementSystem'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: 'main']],
                    extensions: [],
                    userRemoteConfigs: [[
                        url: 'https://github.com/Mohammedsiddiq080/FMS2.git',
                        credentialsId: 'github-credentials'
                    ]]
                ])
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dockerImage = docker.build("fms2-app:${env.BUILD_ID}")
                }
            }
        }

        stage('Run Unit Tests') {
            steps {
                script {
                    try {
                        sh 'docker-compose -f docker-compose.test.yml up -d --build'
                        sleep(time: 15, unit: 'SECONDS')
                        sh 'docker exec fms2-app pytest tests/unit/ -v || true'
                    } finally {
                        sh 'docker-compose -f docker-compose.test.yml down -v'
                    }
                }
            }
            post {
                always {
                    junit 'test-reports/*.xml'
                }
            }
        }

        stage('Integration Test') {
            steps {
                script {
                    try {
                        sh 'docker-compose up -d --build'
                        sleep(time: 20, unit: 'SECONDS')
                        def response = sh(script: 'curl -s -o /dev/null -w "%{http_code}" http://localhost:5000', returnStdout: true).trim()
                        if (response != "200") {
                            error("Integration test failed - App not responding properly")
                        }
                    } finally {
                        sh 'docker-compose down -v'
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
            junit allowEmptyResults: true, testResults: 'test-reports/*.xml'
        }
        success {
            // Remove or replace with your notification method
            echo 'Build succeeded!'
        }
        failure {
            // Remove or replace with your notification method
            echo 'Build failed!'
        }
    }
}
